# -*- coding: utf-8 -*-
"""Customer Churn Predictior.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kGtIo7-n84JWSa7w2JWhJbvKglsnsU5Z
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv("/content/customer_churn_dataset.csv")
df.head()

df.info()
df.describe()
df.shape

df.columns

df.dtypes

df.columns

df.head()

df.drop(columns=['CustomerID'],inplace=True)

df.head()

df['Gender'].unique()

df['Subscription Type'].unique()

df['Last Interaction'].unique()



# Encode Gender (binary category)
from sklearn.preprocessing import LabelEncoder

label_enc = LabelEncoder()
df['Gender'] = label_enc.fit_transform(df['Gender'])  # Male=1, Female=0
df['Subscription Type'] = label_enc.fit_transform(df['Subscription Type'])

df.head()

# Map contract types to number of months
contract_map = {
    'Monthly': 1,
    'Quarterly': 3,
    'Annual': 12
}

df['Contract Length'] = df['Contract Length'].map(contract_map)

df.dtypes

df.head()

df.head()

print(df['Churn'].value_counts())
print("\nPercentage distribution:")
print(df['Churn'].value_counts(normalize=True) * 100)
df.columns

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
# Scale the specified columns and assign the results back to the same columns
# Ensure the columns being assigned to match the columns being scaled
df[['Age','Tenure','Usage Frequency','Support Calls','Payment Delay','Total Spend','Last Interaction']] = scaler.fit_transform(df[['Age','Tenure','Usage Frequency','Support Calls','Payment Delay','Total Spend','Last Interaction']])

X=df.drop('Churn',axis=1)
Y=df['Churn']

X.shape

X.head()

Y.head()

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=42)

from sklearn.ensemble import RandomForestClassifier
model=RandomForestClassifier()
model.fit(X_train,Y_train)

y_pred=model.predict(X_test)

from sklearn.metrics import accuracy_score

# Training accuracy
train_pred = model.predict(X_train)
train_accuracy = accuracy_score(Y_train, train_pred)
print("Training Accuracy:", train_accuracy)

# Testing accuracy
test_pred = model.predict(X_test)
test_accuracy = accuracy_score(Y_test,test_pred)
print("Testing Accuracy:", test_accuracy)

from sklearn.metrics import accuracy_score,classification_report
print(classification_report(Y_test,y_pred))
accuracy=accuracy_score(Y_test,y_pred)
print(accuracy)

import matplotlib.pyplot as plt

feature_importance = model.feature_importances_
features = X_train.columns

plt.figure(figsize=(10,6))
plt.barh(features, feature_importance)
plt.xlabel("Importance")
plt.title("Feature Importance in Random Forest")
plt.show()

from google.colab import files

# Save DataFrame to CSV
df.to_csv('churn_dataset.csv', index=False)

# Download the CSV file
files.download('churn_dataset.csv')

